class Solution {
public:
    bool canBeValid(string s, string locked) {
         
         int n = s.size() ; 
         if(n & 1) return false ; 
         stack<int> st1 , st2; 
         int i = 0 ;
         while(i < n)    {
            if(locked[i] == '0') st2.push(i) ; 
            else if(s[i] == '(') st1.push(i) ; 
            else {
                if(!st1.empty()) st1.pop() ; 
                else if(! st2.empty()) st2.pop() ; 
                else return false ; 
            }
            i++ ; 
         }
         while(!st1.empty() && !st2.empty() && st1.top() < st2.top()) {
              st1.pop() ; 
              st2.pop() ; 
         }
         return st1.empty() ; 
    }
};
